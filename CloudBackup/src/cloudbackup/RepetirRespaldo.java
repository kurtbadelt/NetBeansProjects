/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RepetirRespaldo.java
 *
 * Created on Jul 15, 2012, 5:05:19 PM
 */
package cloudbackup;

import cloudbackup.utils.Util;
import cloudbackup.utils.Ziper;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;

/**
 *
 * @author kurtbadelt
 */
public class RepetirRespaldo extends javax.swing.JPanel {

    /** Creates new form RepetirRespaldo */
    public RepetirRespaldo() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListHistorial = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jButtonCargar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListContent = new javax.swing.JList();
        jButtonContenido = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabelGuardarComo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButtonZip = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButtonUpload = new javax.swing.JButton();

        setBounds(new java.awt.Rectangle(0, 0, 844, 613));
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(cloudbackup.CloudBackupApp.class).getContext().getResourceMap(RepetirRespaldo.class);
        jLabel1.setBackground(resourceMap.getColor("jLabel1.background")); // NOI18N
        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setForeground(resourceMap.getColor("jLabel1.foreground")); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setName("jLabel1"); // NOI18N
        jLabel1.setOpaque(true);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jListHistorial.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "", "", "", "", "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListHistorial.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListHistorial.setName("jListHistorial"); // NOI18N
        jScrollPane1.setViewportView(jListHistorial);

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jButtonCargar.setIcon(resourceMap.getIcon("jButtonCargar.icon")); // NOI18N
        jButtonCargar.setText(resourceMap.getString("jButtonCargar.text")); // NOI18N
        jButtonCargar.setName("jButtonCargar"); // NOI18N
        jButtonCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCargarActionPerformed(evt);
            }
        });

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jListContent.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "", "", "", "", "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jListContent.setName("jListContent"); // NOI18N
        jScrollPane2.setViewportView(jListContent);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(cloudbackup.CloudBackupApp.class).getContext().getActionMap(RepetirRespaldo.class, this);
        jButtonContenido.setAction(actionMap.get("verContenido")); // NOI18N
        jButtonContenido.setText(resourceMap.getString("jButtonContenido.text")); // NOI18N
        jButtonContenido.setName("jButtonContenido"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabelGuardarComo.setText(resourceMap.getString("jLabelGuardarComo.text")); // NOI18N
        jLabelGuardarComo.setName("jLabelGuardarComo"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jButton1.setAction(actionMap.get("GuardarComo")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButtonZip.setAction(actionMap.get("ejecutarRespaldo")); // NOI18N
        jButtonZip.setName("jButtonZip"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jButtonUpload.setAction(actionMap.get("Upload")); // NOI18N
        jButtonUpload.setText(resourceMap.getString("jButtonUpload.text")); // NOI18N
        jButtonUpload.setName("jButtonUpload"); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1060, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 420, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(26, 26, 26)
                                        .add(jButtonContenido))
                                    .add(layout.createSequentialGroup()
                                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 239, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(jButtonCargar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(layout.createSequentialGroup()
                                        .add(2, 2, 2)
                                        .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 295, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(33, 33, 33)
                                        .add(jButton1)))
                                .add(32, 32, 32)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                                    .add(jLabelGuardarComo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .add(layout.createSequentialGroup()
                        .add(308, 308, 308)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 170, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(53, 53, 53)
                                .add(jButtonZip)
                                .add(136, 136, 136)
                                .add(jLabel6)
                                .add(18, 18, 18)
                                .add(jButtonUpload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 78, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 34, Short.MAX_VALUE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(jLabel2)
                                        .add(22, 22, 22))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(jButtonCargar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))))
                            .add(layout.createSequentialGroup()
                                .add(53, 53, 53)
                                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jScrollPane2)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(201, 201, 201)
                        .add(jButtonContenido)))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabelGuardarComo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(37, 37, 37)
                        .add(jLabel5)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButtonZip)
                            .add(jButtonUpload, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 76, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(102, 102, 102)
                        .add(jLabel6)))
                .add(88, 88, 88))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarActionPerformed
        // TODO add your handling code here:
        leerHistorial();
        
        
    }//GEN-LAST:event_jButtonCargarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCargar;
    private javax.swing.JButton jButtonContenido;
    private javax.swing.JButton jButtonUpload;
    private javax.swing.JButton jButtonZip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelGuardarComo;
    private javax.swing.JList jListContent;
    private javax.swing.JList jListHistorial;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
DefaultListModel modelo = new DefaultListModel();
DefaultListModel modelo2 = new DefaultListModel();
Util util = new Util();
String nombreArchivo;
String [] Archivos=null;

public void leerHistorial(){
modelo.removeAllElements();
File folder = new File("src/Historial/");
String [] separadas = util.separateByToken(util.listFilesForFolder(folder), ";");
for(int i=0;i<separadas.length;i++){
modelo.addElement(separadas[i]);
}

this.jListHistorial.setModel(modelo);

}

    @Action
    public void verContenido() {
       modelo2.removeAllElements();
        
       String config = util.readFromHistorial(this.jListHistorial.getSelectedValue().toString());
       String [] lista = util.separateByToken(config, ";");
       
       for(int i=0;i<lista.length;i++){
           modelo2.addElement(lista[i]);
       }
       
       Archivos = new String[lista.length-3];
       int j=0;
       for(int i=3;i<lista.length;i++){
           Archivos[j] = lista[i];
           j++;
       }
       
       for(int i=0;i<Archivos.length;i++){
           System.out.println(Archivos[i]);
       }
       
       this.jListContent.setModel(modelo2);
      
    }

    
        @Action
    public void GuardarComo() {
        
        JFileChooser jfilechooser = new JFileChooser();


        final int respuesta = jfilechooser.showSaveDialog(this);

        if (!(respuesta == JFileChooser.CANCEL_OPTION)) {

            String FileName = jfilechooser.getSelectedFile().getPath()+".zip";
            
        this.jLabelGuardarComo.setText("Tu Respaldo se va a guardar como: "+FileName);
        this.nombreArchivo = FileName;
        }
        
    }

    @Action
    public Task ejecutarRespaldo() {
        return new EjecutarRespaldoTask(org.jdesktop.application.Application.getInstance(cloudbackup.CloudBackupApp.class));
    }

    private class EjecutarRespaldoTask extends org.jdesktop.application.Task<Object, Void> {
        EjecutarRespaldoTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to EjecutarRespaldoTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            
             Ziper ziper = new Ziper();
             ziper.zipMultipleFiles(nombreArchivo, Archivos);
             
             String label = nombreArchivo+";"+System.getProperty("user.name")+";"+util.TimeStamp()+";";
             String savedconfig = label;
             for(int i=0;i<Archivos.length;i++){
                 savedconfig+= Archivos[i]+";";
             }
             util.writeStringToHistorial(savedconfig,"Backup @ "+util.TimeStamp()+"by "+System.getProperty("user.name"));
             
            
            
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
             RepetirRespaldo.this.jLabelGuardarComo.setText("Los Archivos se comprimieron con éxito");
        }
    }

    @Action
    public Task Upload() {
        return new UploadTask(org.jdesktop.application.Application.getInstance(cloudbackup.CloudBackupApp.class));
    }

    private class UploadTask extends org.jdesktop.application.Task<Object, Void> {
        UploadTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to UploadTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }




}
